#!/bin/bash
cd "$(dirname "$0")" || exit
# Commands such as git pull return exit code if there are no changes
# set -e

if [[ -a ".env" ]]; then
    source .env
fi

# Allow terminal overrides for APP_ENV
APP_ENV=${ENV:-$APP_ENV}
echo "APP_ENV is set to: $APP_ENV"


function help-table() {
    # Define column widths
    CMD_WIDTH=25
    OPT_WIDTH=20
    DESC_WIDTH=90
    COLUMN="| %-${CMD_WIDTH}s | %-${OPT_WIDTH}s | %-${DESC_WIDTH}s |\n"

    # Print table header
    printf "$COLUMN" "Command" "Option" "Description"
    echo "|$(printf '%*s' $((CMD_WIDTH + 2)) '' | tr ' ' '-')|$(printf '%*s' $((OPT_WIDTH + 2)) '' | tr ' ' '-')|$(printf '%*s' $((DESC_WIDTH + 2)) '' | tr ' ' '-')|"

    # Print table rows

    # printf "$COLUMN" "activate-venv" "" "Activate virtualenv."
    # printf "$COLUMN" "add-git-submodule" "[url] [path]" "Add git submodule."
    printf "$COLUMN" "backup" "<database_name> [backup_file]" "Back up an Odoo database to a zip file."
    printf "$COLUMN" "build" "[Dockerfile][service]" "Build Odoo Container image. Optionally define single service."
    # printf "$COLUMN" "build-vuepress" "" "Create Vuepress build."
    # printf "$COLUMN" "change-uuid" "[env]" "Change database uuid via xmlrpc."
    # printf "$COLUMN" "checkout" "[version]" "Checkout Odoo version."
    # printf "$COLUMN" "checkout-git-folder" "" "Checkout git commit."
    # printf "$COLUMN" "checkout-latest-revision" "[version]" "Checkout the latest revision of the Odoo version."
    # printf "$COLUMN" "checkout-revision" "[revision]" "Run Odoo revision script or checkout revision set by env var."
    # printf "$COLUMN" "commit-with-llm" "" "Commit with llm generated commit message."
    printf "$COLUMN" "clone-addons" "" "Run the clone-addons.sh script."
    # printf "$COLUMN" "clean-git-folder" "" "Clean git folder."
    # printf "$COLUMN" "clear-assets" "[db]" "Clear all assets of Odoo database."
    # printf "$COLUMN" "clear-filestore" "[db]" "Clear local filestore folder. No param will clear all filestores."
    # printf "$COLUMN" "clear-views" "[db]" "Clear all views of Odoo database."
    # printf "$COLUMN" "clock-odoo" "[db]" "Count custom line of codes."
    # printf "$COLUMN" "clone-git-folder" "" "Clone git folder listed in the .gitmodules file."
    # printf "$COLUMN" "commit-git-folder" "[message][path]" "Commit all changes in path."
    # printf "$COLUMN" "container-login" "[user][pass]" "Setup container hub login credentials."
    # printf "$COLUMN" "create-git-feature-branch" "[path]" "Create feature branch for Odoo module."
    # printf "$COLUMN" "create-git-mig-branch" "[path]" "Create migration branch for Odoo module."
    # printf "$COLUMN" "create-module" "[path]" "Create new Odoo module from template."
    # printf "$COLUMN" "create-module-repo" "[path]" "Initialize Odoo module repo from template."
    # printf "$COLUMN" "create-nextcloud-env" "[env]" "Create env file for Nextcloud instance."
    # printf "$COLUMN" "create-odoo-env" "[env]" "Create env file for Odoo Instance."
    # printf "$COLUMN" "create-revision" "[revision]" "Create new Odoo revision."
    # printf "$COLUMN" "create-snippet" "[id]" "Create snippet from template."
    # printf "$COLUMN" "debug" "[name]" "Debugg application. Options: native."
    # printf "$COLUMN" "delete-git-folder" "" "Delete all git folders."
    # printf "$COLUMN" "dev-vuepress" "" "Start Vuepress development server."
    # printf "$COLUMN" "disable-mailserver" "[env]" "Disable mail server settings via xmlrpc."
    # printf "$COLUMN" "disable-snippet" "[env][path]" "Disable snippet definition."
    # printf "$COLUMN" "drop-db" "[db]" "Drop target Odoo database."
    # printf "$COLUMN" "edit-env" "[env]" "Open env file in default editor."
    # printf "$COLUMN" "generate-admin-passwd" "[pass]" "Generate hash for Odoo master password."
    # printf "$COLUMN" "generate-module-docs" "[path]" "Generate readme file for module."
    # printf "$COLUMN" "generate-module-model" "[path][model]" "Generate model in module folder."
    # printf "$COLUMN" "generate-module-inherit" "[path][model]" "Generate inherited model in module folder."
    # printf "$COLUMN" "generate-module-views" "[path][model]" "Generate model views in module folder."
    # printf "$COLUMN" "generate-module-security" "[path][model]" "Generate model access file."
    # printf "$COLUMN" "generate-module-snippet" "[path][ref]" "Generate snippet for referefenced view."
    # printf "$COLUMN" "generate-module-wizard" "[path][model]" "Generate wizard for a model in module folder."
    # printf "$COLUMN" "get-addons-path" "" "Output addons path."
    # printf "$COLUMN" "status-git-folder" "[path]" "Show status for git folder in path."
    # printf "$COLUMN" "get-modules" "[path][option]" "Get list of modules in path. Option is 'basename' or 'dirname'."
    # printf "$COLUMN" "get-module-version" "[path]" "Get module version from manifest."
    # printf "$COLUMN" "import-csv" "[db][path]" "Import data from csv. Filename must match PostgreSQL table name."
    printf "$COLUMN" "info" "" "Show values of project env vars."
    # printf "$COLUMN" "init-db" "[db]" "Initialize the Odoo database."
    # printf "$COLUMN" "init-module" "[db][path,module]" "Initialize Odoo module."
    # printf "$COLUMN" "init-venv" "" "Initialize python virtual env."
    # printf "$COLUMN" "install-native" "" "Install Odoo requirements in source folder."
    # printf "$COLUMN" "install-odoo-scripts" "" "Install Odoo scripts."
    # printf "$COLUMN" "install-requirements" "[db][path]" "Install python packages from requirements.txt."
    # printf "$COLUMN" "install-snippet" "[env][path]" "Install snippet definition."
    # printf "$COLUMN" "install-vuepress" "" "Install Node build dependencies."
    # printf "$COLUMN" "lint-module" "[path]" "Run pylint odoo for module."
    # printf "$COLUMN" "lint-module-repo" "[path]" "Run pylint odoo for modules in repo folder."
    # printf "$COLUMN" "lint-snippets" "" "Run checks for all snippets."
    # printf "$COLUMN" "list-env" "" "List env files."
    # printf "$COLUMN" "list-git-folder" "[grep]" "List path and url of git folders."
    # printf "$COLUMN" "list-modules" "[path]" "Get modules in path as list."
    # printf "$COLUMN" "list-revision" "" "List available Odoo revisions."
    # printf "$COLUMN" "list-versions" "" "List available Odoo versions."
    # printf "$COLUMN" "load-language" "[db][lang]" "Install language package in Odoo db."
    # printf "$COLUMN" "load-version" "[version]" "Load git refs from  version folder."
    # printf "$COLUMN" "load-ssh-key" "" "Load SSH private key from env var."
    printf "$COLUMN" "logs" "[name]" "Tail container logs. Default is 'odoo'."
    # printf "$COLUMN" "ls-module" "[grep]" "List Odoo addons path space separated."
    # printf "$COLUMN" "ls-git-folder" "[grep]" "List git folders path space separated."
    # printf "$COLUMN" "odooctl" "[param]" "Execute odooctl cli."
    printf "$COLUMN" "odoo-shell" "[db]" "Start Odoo shell from source folder."
    # printf "$COLUMN" "patch-database" "[db][path]" "Apply sql file to database."
    printf "$COLUMN" "ps" "" "List container processes."
    printf "$COLUMN" "psql-shell" "[db]" "Start PSQL shell in container container."
    # printf "$COLUMN" "publish" "[Dockerfile]" "Publish Odoo container image."
    # printf "$COLUMN" "pull-git-folder" "" "Pull all git folders listed in the .gitmodules file."
    # printf "$COLUMN" "push-git-folder" "" "Push all git folders in path."
    # printf "$COLUMN" "pytest-module" "[db][name,path]" "Run module tests with pytest."
    # printf "$COLUMN" "release-module" "[path]" "Create GitHub release for a module."
    # printf "$COLUMN" "remove" "[name]" "Remove containers and volumes. Options: none, db, admin, odoo, mail."
    # printf "$COLUMN" "remove-env" "[env]" "Remove environment config."
    # printf "$COLUMN" "remove-git-submodule" "[path]" "Remove a git submodule."
    # printf "$COLUMN" "remove-module" "[db][name]" "Remove target Odoo module."
    # printf "$COLUMN" "remove-snippet" "[env][path]" "Remove snippet definition."
    # printf "$COLUMN" "record-with-memray" "[name]" "Record application memory usage with memray. Options: native."
    # printf "$COLUMN" "record-with-py-spy" "[pid]" "Record and create flamechart for a process."
    # printf "$COLUMN" "reset-git-folder" "" "Abort rebase and reset submodules listed in the .gitmodules file."
    # printf "$COLUMN" "reset-views" "[db][key]" "Execute hard reset on views matching keys."
    printf "$COLUMN" "restart" "[name]" "Restart container."
    printf "$COLUMN" "restore" "<db|filestore>" "Restore DB and/or FILESTORE from last backup"
    # printf "$COLUMN" "restore-dotenv" "" "Restore content of .env from pass entry."
    printf "$COLUMN" "run" "[name][cmd]" "Run container with command."
    # printf "$COLUMN" "save-version" "" "Save git folder refs to version folder."
    # printf "$COLUMN" "serve-vuepress" "" "Serve Vuepress build."
    # printf "$COLUMN" "set-addons-path" "" "Set Odoo addons path env variable."
    # printf "$COLUMN" "set-admin" "[db]" "Sets the password for the first user in database."
    # printf "$COLUMN" "setup-mail" "[db]" "Setup mail config in Odoo db."
    # printf "$COLUMN" "setup-mail-sql" "[db]" "Setup mail config in Odoo db with SQL."
    # printf "$COLUMN" "show-env" "[env]" "Output content of the env file."
    # printf "$COLUMN" "show-revision" "[revision]" "Show references of Odoo revision."
    # printf "$COLUMN" "source" "" "Source the Python virtual env."
    # printf "$COLUMN" "stage-git-folder" "[path]" "Stage all files in git folders in path."
    printf "$COLUMN" "start" "[name][--browser]" "Start application. If --browser, open the browser."
    printf "$COLUMN" "stop" "[name]" "Stop containers."
    # printf "$COLUMN" "store-dotenv" "" "Store content of .env in pass entry."
    # printf "$COLUMN" "switch-git-folder" "[version]" "Switch branch for all git folders listed in the .gitmodules file."
    # printf "$COLUMN" "sync-git-folder" "" "Switch, stash and pull all git folders."
    # printf "$COLUMN" "template-compose" "" "Template the Docker compose file."
    printf "$COLUMN" "odoo-rc" "" "Generate the Odoo config file."
    # printf "$COLUMN" "template-repo" "[path]" "Update the repo folder from template."
    # printf "$COLUMN" "test-image" "[Dockerfile]" "Test Odoo container image."
    # printf "$COLUMN" "test-module" "[db][name,path]" "Test target Odoo module."
    # printf "$COLUMN" "test-module-repo" "[db][path]" "Test target Odoo modules in repo folder."
    # printf "$COLUMN" "test-project" "[clean]" "Run tests for this project."
    # printf "$COLUMN" "test-xmlrpc" "[env]" "Test json rpc connection."
    # printf "$COLUMN" "translate-module" "[db][path][lang]" "Generate translation for Odoo module."
    # printf "$COLUMN" "update-docs" "" "Update project docs."
    printf "$COLUMN" "up" "[container]" "Brning up container"
    printf "$COLUMN" "update-help-docs" "" "Write help table to task.md file."
    # printf "$COLUMN" "update-module" "[db][name,path]" "Update target Odoo module."
    # printf "$COLUMN" "update-module-license" "[grep]" "Update LICENSE file for each matching module."
    # printf "$COLUMN" "update-module-list" "[db]" "Update module list."
    # printf "$COLUMN" "update-module-docs" "" "Update modules docs file."
    # printf "$COLUMN" "update-repo-docs" "[path]" "Update Readme file of the repo."
    # printf "$COLUMN" "update-revision-docs" "" "Update revisions doc file."
    # printf "$COLUMN" "update-snippet" "[env][path]" "Update snippet definition."
    # printf "$COLUMN" "update-snippet-docs" "" "Update snippets doc file."
    # printf "$COLUMN" "update-with-llm" "[path][prompt]" "Feed module files with prompt to LLM and apply file changes."
    # printf "$COLUMN" "upgrade-module" "[path][version]" "Upgrade code of module from target Odoo version."
    # printf "$COLUMN" "upgrade-odoo" "[db][version][mode]" "Run the Odoo upgrade scripts. Default mode ist 'test'."
    # printf "$COLUMN" "upload-module" "[env][path]" "Zip and upload Odoo module."
    printf "$COLUMN" "version" "" "Show version of required tools."
    # printf "$COLUMN" "visualize-dependencies" "[path]" "Generate visualizations of module dependencies."
    # printf "$COLUMN" "zip-module" "[path]" "Create zip file for module."
}

function help() {
    echo
    echo "$1 <command> [options]"
    echo
    echo "commands:"
    echo
    help-table
    echo
}

# Static env vars

PASS_ENTRY="env/${PWD##*/}"
PASS_ENTRY="${PASS_ENTRY,,}"
ODOO_RC="odoo.conf"
ODOO_BUILD_CONFIG_DIR="$HOME/.config/odoo-build"


# Dynamic env vars
BACKUP_DIR=${BACKUP_DIR:="./backup"}
DOWNLOAD_DIR=${DOWNLOAD_DIR:="./download"}

ODOO_VERSION=$(echo "$ODOO_REVISION" | cut -d'.' -f1-2)
ODOO_DATABASE=${ODOO_DATABASE:="$ODOO_VERSION"}
ODOO_LANGUAGE=${ODOO_LANGUAGE:="de_CH"}
ODOO_PORT=${ODOO_PORT:="8069"}
POSTGRES_IMAGE=${POSTGRES_IMAGE:="postgres:14-alpine"}
POSTGRES_PORT=${POSTGRES_PORT:="5432"}
LOG_LEVEL=${LOG_LEVEL:="info"}
CONTAINER_REGISTRY=${CONTAINER_REGISTRY:="mintsystem/"}
CONTAINER_TAG=${CONTAINER_TAG:="odoo:${ODOO_REVISION}"}
CONTAINER_CONFIG="$HOME/.docker/$CONTAINER_REGISTRY"
BROWSER_OPEN=${BROWSER_OPEN:=false}
CONTAINER_ENGINE=${CONTAINER_ENGINE:="docker"}
COMPOSE_COMMAND=${COMPOSE_COMMAND:="docker compose"}
LLM_MODEL=${LLM_MODEL:="llama"}
SMTP_SERVER=${SMTP_SERVER:="localhost"}
SMTP_PORT=${SMTP_PORT:=1025}
MAIL_DEFAULT_FROM=${MAIL_DEFAULT_FROM:="notification"}
MAIL_CATCHALL_ALIAS=${MAIL_CATCHALL_ALIAS:="catchall"}

# Conditional env vars

if [[ "$CONTAINER_ENGINE" == "podman" ]]; then
    COMPOSE_COMMAND="podman-compose"
fi

if [[ "$(uname)" == "Darwin" ]]; then
    OS_RELEASE="Darwin"
    PYTHON_NOTIFY=""
    OS_OPEN="open"
else
    OS_RELEASE=$(awk -F= '/^NAME/{print $2}' /etc/os-release | tr -d '"')
    PYTHON_NOTIFY="inotify"
    OS_OPEN="xdg-open"
fi

# Import commands

[ -f ~/taskfile.build/bin/commit-with-llm ] && source ~/taskfile.build/bin/commit-with-llm

# Define color constants
COLOR_RESET="\033[0m"
COLOR_RED="\033[31m"
COLOR_GREEN="\033[32m"
COLOR_YELLOW="\033[33m"
COLOR_BLUE="\033[34m"
COLOR_GRAY="\033[2m"
COLOR_CYAN="\033[36m"

# Function to echo text in a given color
function echo_color() {
    local color=$1
    local text=$2
    echo -e "${color}${text}${COLOR_RESET}"
}

# Help Commands
function info() {
    echo "OS Release: $OS_RELEASE"
    echo "Odoo Revision: $ODOO_REVISION"
    echo "Odoo Version: $ODOO_VERSION"
    echo "Odoo Port: $ODOO_PORT"
    echo "Postgres Port: $POSTGRES_PORT"
    echo "Odoo Language: $ODOO_LANGUAGE"
    echo "Container Registry: $CONTAINER_REGISTRY"
    echo "Container Config: $CONTAINER_CONFIG"
    echo "Container Tag: $CONTAINER_TAG"
    echo "Addons Path: $ADDONS_PATH"
}

function version() {
    uv --version
    wkhtmltopdf -V
    if [ "$CONTAINER_ENGINE" == "docker" ]; then
        docker -v
        docker compose version
    else
        podman --version
        podman-compose --version
    fi
}

function update-help-docs() {
    if [[ -z "$1" ]]; then
        echo_color $COLOR_GRAY "Updating help table (task.md)..."
    fi
    help-table > task.md
}

function logs() {
    CONTAINER="$1"
    CONTAINER=${CONTAINER:="odoo"}

    echo_color $COLOR_BLUE "Tail logs on '$CONTAINER' container..."
    $COMPOSE_COMMAND logs -f -n100 "$CONTAINER"
}

function open-url-with-delay() {
    if test -z "$1"; then
        echo "\$1 is empty.";
        exit;
    fi
    if $BROWSER_OPEN; then
        sleep 2
        $OS_OPEN "$1"
    else
        echo_color $COLOR_GRAY "Open $1 in your browser."
    fi
}

function start() {

    if [ -z "$1" ] ; then
        echo_color $COLOR_BLUE "Start all containers... $SERVICES"
        $COMPOSE_COMMAND up -d
        exit 0
    fi

    # Split $SERVICES into an array
    IFS=',' read -r -a services_array <<< "$SERVICES"

    # Check if $1 is in the list of services
    if [[ ! " ${services_array[@]} " =~ " $1 " ]]; then
        echo_color $COLOR_RED "Error: '$1' is not a valid service. Valid services are: $SERVICES"
        exit 1
    fi

    echo_color $COLOR_BLUE "Starting '$1' container..."
    if [[ "$1" =~ "proxy" ]]; then
        $COMPOSE_COMMAND up -d "nginx-proxy"
        return
    fi


    if [[ "$1" =~ "pgadmin" ]]; then
        open-url-with-delay "http://$PGADMIN_DOMAIN"
    fi

    if [[ "$1" =~ "odoo" ]]; then
        local url="http://$DOMAIN"
        if [[ "$2" == "-b" || "$2" == "--browser" ]]; then
            echo_color $COLOR_GRAY "Openning $url..."
            $OS_OPEN "$url" &> /dev/null &
            return
        else
            open-url-with-delay $url $2
        fi
    fi

    # Start the specified service
    $COMPOSE_COMMAND up -d "$1"
}

function up() {
    if [ -z "$1" ] ; then
        echo_color $COLOR_BLUE "Build all images..."
        $COMPOSE_COMMAND up
    else
        echo_color $COLOR_BLUE "Build '$1' image..."
        $COMPOSE_COMMAND up "$1"
    fi
}

function stop() {
    if [ -z "$1" ] ; then
        echo_color $COLOR_BLUE "stoping all containers... $SERVICES"
        $COMPOSE_COMMAND stop
    else
        echo_color $COLOR_BLUE "Stop '$1' container..."
        if [[ "$1" =~ "proxy" ]]; then
            $COMPOSE_COMMAND stop "nginx-proxy"
            return
        fi
        $COMPOSE_COMMAND stop "$1"
    fi
}

function cp-odoo-addons() {
    rm -rf ./odoo/addons
    $COMPOSE_COMMAND cp odoo:${COMMUNITY_ADDONS} ./odoo
}


function restart() {
    stop $1
    start $1
}

function ps() {
    $CONTAINER_ENGINE ps
}

function build() {
    if [ -z "$1" ] ; then
        echo_color $COLOR_BLUE "Build all images..."
        $COMPOSE_COMMAND build
    else
        echo_color $COLOR_BLUE "Build '$1' image..."
        $COMPOSE_COMMAND build "$1"
    fi
}


# Interactive Shell Commands

function run() {
    if test -z "$1"; then echo "\$1 is empty."; exit; fi
    if test -z "$2"; then echo "\$2 is empty."; exit; fi

    echo_color $COLOR_BLUE "Run '$1' container with command '$2'."
    echo_color $COLOR_GRAY "$COMPOSE_COMMAND run --rm -it \"$1\" \"$2\""
    $COMPOSE_COMMAND run --rm -it "$1" "$2"
}

function _ensure_is_running() {
    # Check if the CONTAINER container is running
    CONTAINER="$1"
    CONTAINER=${CONTAINER:="odoo"}
    if ! $COMPOSE_COMMAND ps --filter "name=$CONTAINER" --filter "status=running" | grep -q "$CONTAINER"; then
        echo_color $COLOR_YELLOW "$CONTAINER container is not running. Starting it..."
        start $CONTAINER
        # Wait for the container to be fully started
        while ! $COMPOSE_COMMAND ps --filter "name=$CONTAINER" --filter "status=running" | grep -q "$CONTAINER"; do
            echo_color $COLOR_GRAY "Waiting for $CONTAINER container to start..."
            sleep 2
        done
        echo
    else
        echo_color $COLOR_GREEN "$CONTAINER container is already running."
    fi
}


function odoo-shell() {
    DATABASE="$1"
    if [ -z "$DATABASE" ]; then
        DATABASE="$DB_NAME"
    fi
    _ensure_is_running postgres
    # $COMPOSE_COMMAND exec -it odoo odoo shell --no-http
    $COMPOSE_COMMAND run --rm -it odoo shell --no-http
}

function psql-shell() {
    DATABASE="$1"
    if [ -z "$DATABASE" ]; then
        DATABASE="$DB_NAME"
    fi
    _ensure_is_running postgres
    $COMPOSE_COMMAND exec -it postgres psql "postgres://$DB_USER:$DB_PASSWORD@$DB_HOST:$DB_PORT/$DATABASE"
}


function backup() {
    DATABASE="$1"
    if [ -z "$DATABASE" ]; then
        DATABASE="$DB_NAME"
    fi
    _ensure_is_running postgres
    $COMPOSE_COMMAND exec -it postgres /backup.sh $DATABASE
}

function backup-full() {
    DATABASE="$1"
    if [ -z "$DATABASE" ]; then
        DATABASE="$DB_NAME"
    fi
    _ensure_is_running postgres
    $COMPOSE_COMMAND exec -it postgres /backup.sh -f $DATABASE
}


function restore() {

    # Parse arguments
    RESTORE_FILESTORE=false
    RESTORE_DB=false
    while [[ $# -gt 0 ]]; do
    case "$1" in
        -d|--db|db)
        RESTORE_DB=true
        shift
        ;;
        -f|--filestore|filestore)
        RESTORE_FILESTORE=true
        shift
        ;;
        -*)
        echo "Invalid option: $1" >&2
        echo "Usage: $0 [-f|--filestore] [-v|--verbose] <database_name>" >&2
        exit 1
        ;;
        *)
        break
        ;;
    esac
    done

    # Exit if both RESTORE_DB and INCLUDE_FILESTORE are false
    if [[ "${RESTORE_DB}" = false && "${RESTORE_FILESTORE}" = false ]]; then
        echo "Nothing to restore: both database and filestore restore are disabled. Use -d and/or -f." >&2
        echo "Usage: $0 restore {[-f|--filestore] [-d|--db]} [<database_name>]" >&2
        echo " -f, --filestore : restore filestore in the backup" >&2
        echo " -d, --db   : restore database" >&2
        echo " database_name : defaults to $DB_NAME" >&2
        exit 1
    fi

    DATABASE="$1"
    if [ -z "$DATABASE" ]; then
        DATABASE="$DB_NAME"
    fi


    if [[ "${RESTORE_DB}" = true ]]; then
        _ensure_is_running postgres
        $COMPOSE_COMMAND exec -it postgres /restore.sh --db $DATABASE
    fi

    if [[ "${RESTORE_FILESTORE}" = true ]]; then
        _ensure_is_running odoo
        $COMPOSE_COMMAND exec -it odoo /restore.sh --filestore $DATABASE
        # $COMPOSE_COMMAND exec -u root odoo chown -R odoo:odoo /var/lib/odoo/filestore/$DATABASE
    fi

}


function clone-addons() {
    _ensure_is_running odoo

    # Execute the clone-addons script inside the odoo container
    echo_color $COLOR_BLUE "Running clone-addons.sh inside the Odoo container..."

    # Uncomment the following line if you need to run the script as root
    $COMPOSE_COMMAND exec -u root odoo /clone-addons.sh
}

function odoo-rc() {
    _ensure_is_running odoo

    # Execute the clone-addons script inside the odoo container
    echo_color $COLOR_BLUE "Running odoorc.sh inside the Odoo container..."

    # Uncomment the following line if you need to run the script as root
    $COMPOSE_COMMAND exec -u root odoo /odoorc.sh
}


function list-valid-commands() {
    update-help-docs --silent

    # Extract commands from task.md
    echo_color $COLOR_YELLOW "Valid commands are:"
    tail -n +2 task.md | grep -E "^\| [a-zA-Z0-9_-]+ " | awk -F'|' '{print $2}' | sed 's/^ //;s/ $//' | paste -d' ' - - - - -
    echo_color $COLOR_GRAY "Run 'task help' for more details on each command."

}


function update-module() {
    if test -z "$1"; then echo "\$1 is empty."; exit; fi

    # Use default database if second param is not given
    if test -z "$2"; then
        DATABASE="$DB_NAME"
        MODULE_NAME=$(basename "$1")
    else
        DATABASE="$1"
        MODULE_NAME=$(basename "$2")
    fi


    echo "Updating module $MODULE_NAME on $DATABASE ..."
    $COMPOSE_COMMAND run --rm -it odoo update "$MODULE_NAME"



    # if [[ -n "$ODOO_PARAM" ]] ; then
    #     odoo --database "$DATABASE" --update "$MODULE_NAME" --config "$ODOO_RC" --addons-path="$ADDONS_PATH" --stop-after-init --no-http "$ODOO_PARAM"
    # else
    #     odoo --database "$DATABASE" --update "$MODULE_NAME" --config "$ODOO_RC" --addons-path="$ADDONS_PATH" --stop-after-init --no-http
    # fi
}

# Creating missing folders and files
[ -f ./task.md ] || update-help-docs
[ -d ./enterprise ] || mkdir enterprise
[ -d "$DOWNLOAD_DIR" ] || mkdir -p "$DOWNLOAD_DIR"
[ -d "$BACKUP_DIR" ] || mkdir -p "$BACKUP_DIR"

if declare -f "$1" > /dev/null; then
    "$1" "${@:2}"
else
    case "$1" in
        help)
            help task
            exit 1
            ;;
        source)
            activate-venv
            ;;
        *)
            if [ -n "$1" ]; then
                echo_color $COLOR_RED "Unknown command: $1"
                list-valid-commands
            else
                help task
            fi
            exit 1
            ;;
    esac
fi
